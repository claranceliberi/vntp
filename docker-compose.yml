version: '3.8'

services:
  # Databases
  postgres-imisanzu:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: imisanzu_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: imisanzu_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_imisanzu_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imisanzu_user -d imisanzu_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-oracle:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: oracle_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: oracle_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_oracle_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oracle_user -d oracle_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Services
  oracle-service:
    build:
      context: ./oracle
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - DATABASE_URL=postgresql://oracle_user:password@postgres-oracle:5432/oracle_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_PORT=3002
      - API_PREFIX=api/v1
      - SWAGGER_ENABLE=1
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_ISSUER=vntp-oracle-service
      - HEALTH_TOKEN=health_check_token_123
      - PASSENGERS_ALLOWED=yes
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    depends_on:
      postgres-oracle:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3002/api/v1/employees || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  imisanzu-service:
    build:
      context: ./imisanzu
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://imisanzu_user:password@postgres-imisanzu:5432/imisanzu_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_PORT=3001
      - API_PREFIX=api/v1
      - SWAGGER_ENABLE=1
      - JWT_SECRET=your_jwt_secret_key_here
      - JWT_ISSUER=vntp-imisanzu-service
      - HEALTH_TOKEN=health_check_token_123
      - PASSENGERS_ALLOWED=yes
      - ORACLE_SERVICE_URL=http://oracle-service:3002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    depends_on:
      postgres-imisanzu:
        condition: service_healthy
      redis:
        condition: service_healthy
      oracle-service:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3001/api/v1/employees || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Observability Stack
  postgres-exporter-imisanzu:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-imisanzu
    environment:
      - DATA_SOURCE_NAME=postgresql://imisanzu_user:password@postgres-imisanzu:5432/imisanzu_db?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      postgres-imisanzu:
        condition: service_healthy

  postgres-exporter-oracle:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter-oracle  
    environment:
      - DATA_SOURCE_NAME=postgresql://oracle_user:password@postgres-oracle:5432/oracle_db?sslmode=disable
    ports:
      - "9188:9187"
    depends_on:
      postgres-oracle:
        condition: service_healthy

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8090:8090"   # Prometheus metrics endpoint
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # SigNoz Query Service (Backend)
  query-service:
    image: signoz/query-service:0.49.0
    container_name: query-service
    environment:
      - ClickHouseUrl=tcp://clickhouse:9000
      - STORAGE=clickhouse
      - GODEBUG=netdns=go
      - TELEMETRY_ENABLED=true
      - DEPLOYMENT_TYPE=docker-standalone-amd64
      - SIGNOZ_LOCAL_DB_PATH=/var/lib/signoz/signoz.db
    volumes:
      - signoz_data:/var/lib/signoz
    ports:
      - "8080:8080"
    depends_on:
      clickhouse:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # SigNoz Frontend
  frontend:
    image: signoz/frontend:0.49.0
    container_name: signoz-frontend
    ports:
      - "3301:3301"
    volumes:
      - ./monitoring/signoz/nginx-config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      query-service:
        condition: service_healthy

  # SigNoz AlertManager
  alertmanager:
    image: signoz/alertmanager:0.23.5
    container_name: alertmanager
    volumes:
      - ./monitoring/signoz/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    depends_on:
      query-service:
        condition: service_healthy
    ports:
      - "9093:9093"

  # OTEL Collector with official configuration
  otel-collector-signoz:
    image: signoz/signoz-otel-collector:0.102.1
    container_name: signoz-otel-collector
    hostname: otel-collector
    command: 
      [
        "--config=/etc/otel-collector-config.yaml"
      ]
    volumes:
      - ./monitoring/signoz/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=signoz-otel-collector,service.version=0.102.1
    ports:
      - "4319:4317"   # OTLP gRPC receiver
      - "4320:4318"   # OTLP HTTP receiver
      - "8888:8888"   # OtelCollector internal metrics
      - "8889:8889"   # signoz spanmetrics exposed by the agent
      - "9412:9411"   # Zipkin port
      - "13134:13133" # health check extension
      - "14251:14250" # Jaeger gRPC
      - "14269:14268" # Jaeger thrift HTTP
    depends_on:
      clickhouse:
        condition: service_started
      query-service:
        condition: service_healthy


  clickhouse:
    image: clickhouse/clickhouse-server:24.1.2-alpine
    container_name: signoz-clickhouse
    tty: true
    volumes:
      - ./monitoring/signoz/clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ./monitoring/signoz/clickhouse-users.xml:/etc/clickhouse-server/users.xml
      - ./monitoring/signoz/custom-function.xml:/etc/clickhouse-server/custom-function.xml
      - clickhouse_data:/var/lib/clickhouse/
    ports:
      - "9000:9000"
      - "8123:8123"
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_imisanzu_data:
  postgres_oracle_data:
  redis_data:
  prometheus_data:
  grafana_data:
  signoz_data:
  clickhouse_data: